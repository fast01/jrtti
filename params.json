{"name":"Jrtti - C++ Introspection","body":"jrtti - C++ Introspection\t\t\r\n=========================\r\n\r\nOverview\r\n--------\r\n\r\njrtti is a C++ template library providing reflection capabilities for C++ programing language\r\n\r\njrtti provides abstraction for standard and custom C++ types and classes.\r\nThis abstraction exposes class members at run time, wich can be accessed by its string name.\r\n\r\nIt also provides a string representation of class members that can be used for object serialization\r\nand deserialization.\r\n\r\nMain Classes and namespaces\r\n---------------------------\r\n\r\n- jrtti\r\n- Reflector\r\n- Metatype\r\n- Property\r\n- Method\r\n\r\nDetailed Documentation\r\n----------------------\r\n\r\nFind detailed library documentation at http://jseto.github.com/jrtti/doc/\r\n\r\nDownload\r\n--------\r\n\r\nYou can get jrtti from GitHub at https://github.com/jseto/jrtti\r\n\r\nDependencies\r\n------------\r\n\r\n### Boost\r\njrtti uses header-only Boost C++ libraries. Download boost from http://www.boost.org/ and\r\nmake sure your compiler have access to boost include directory.\t\t\r\n\r\n### gtest\r\njrtti test use gtest testing framework. If you plan to run the test download \r\ngtest from http://code.google.com/p/googletest/ and install it. \r\n\r\nInstall\r\n-------\r\n\r\njrtti is a header-only library. Just make sure your compiler has access to jrtti include directory\r\nand add #include <jrtti/jrtti.hpp> to your source code. \r\nMake sure boost header file path is available to your project.\r\n\r\nExample\r\n-------\r\n\r\nThis easy example shows the main capabilities and usage of jrtti.\r\nFor more detailed samples see sample.cpp and tests under the test directory.\r\n\r\n\r\n~~~{.cpp}\r\n#include <jrtti/jrtti.hpp>\r\n\r\n// Define C++ classes\r\nstruct Position {\r\n\tint x;\r\n\tint y;\r\n};\r\n\r\nclass Ball\r\n{\r\npublic:\r\n\tBall() : m_color( \"green\" )\r\n\t{};\r\n\r\n\t// color getter\r\n\tstd::string getColor()\r\n\t{\r\n\t\treturn m_color;\r\n\t}\r\n\r\n\t// position setter\r\n\tvoid setPosition( const Position& pos ) {\r\n\t\tm_position = pos;\r\n\t}\r\n\r\n\t// position getter\r\n\tPosition getPosition()\r\n\t{\r\n\t\treturn m_position;\r\n\t}\r\n\r\n\t// move ball ( method call example )\r\n\tvoid kick()\r\n\t{\r\n\t\tstd::cout << \"Ball kicked far away.\" << std::endl;\r\n\t}\r\n\r\nprivate:\r\n\tstd::string m_color;\r\n\tPosition m_position;\r\n};\r\n\r\nint main()\r\n{\r\n\t// Make Position class available to jrtti\r\n\tjrtti::declare< Position >()\r\n\t\t.property( \"x\", &Position::x )\r\n\t\t.property( \"y\", &Position::y );\r\n\r\n\t// Make Ball class available to jrtti\r\n\tjrtti::declare< Ball >()\r\n\t\t.property( \"color\", &Ball::getColor )\r\n\t\t.property( \"position\", &Ball::setPosition, &Ball::getPosition )\r\n\t\t.method< void >( \"kick\", &Ball::kick );\r\n\r\n\t// Use jrtti\r\n\tBall ball;\r\n\tPosition pos;\r\n\tpos.x = 10; pos.y = 40;\r\n\r\n\t// set the ball position\r\n\tjrtti::getType( \"Ball\" ).property( \"position\" ).set( &ball, pos );\r\n\r\n\t//get a Metatype object\r\n\tjrtti::Metatype & mt = jrtti::getType(\"Ball\");\r\n\r\n\t//and working with it accessing properties as an array\r\n\tstd::cout << \"Ball color: \" << mt[ \"color\" ].get< std::string >( &ball ) << std::endl;\r\n\r\n\t//call a method\r\n\tmt.call< void >( \"kick\", &ball );\r\n\r\n\t//change the property value by full categorized name\r\n\tmt.apply( &ball, \"position.x\", 34 );\r\n\t//and get it\r\n\tstd::cout << mt.eval<int>( &ball, \"position.x\" ) << std::endl;\r\n\r\n\t//get object string representation\r\n\tstd::cout << mt.toStr( &ball );\r\n\r\n\tstd::cin.ignore(1);\r\n\treturn 0;\r\n}\r\n~~~\r\n\r\nRunning the tests\r\n-----------------\r\n\r\n### Windows\r\n\r\nThere are VSC++ and Codegear project files under the test directory. As said above, test are coded \r\nusing [gtest](http://code.google.com/p/googletest/). Install gtest in your system as well\r\nas boost libraries and add the following environment variables:\r\n\r\n\tBOOST_ROOT -> points to your boost directory\r\n\tGTEST_ROOT -> points to your gtest directory\r\n\r\n### Linux\r\nThere are no makefiles for Linux compilers, but the setup should be straight forward.\r\n\r\n\r\nGet help and collaborate\r\n------------------------\r\n\r\nYou can check the [wiki](https://github.com/jseto/jrtti/wiki). If you do not find the answer, [twit \\@jrtti_cpp for help](https://twitter.com/intent/tweet?screen_name=jrtti_cpp&text=Help!!!%20I%20need%20help%20on)\r\n\r\nIf you want to collaborate, [fork jrtti](https://github.com/jseto/jrtti/fork) from Github and send a pull request.\r\n\r\n### Bug notification\r\n\r\nIf you find a bug, check if there is a [open related issue](https://github.com/jseto/jrtti/issues) about the bug you detected, if not open a [new issue](https://github.com/jseto/jrtti/issues/new) in Github.\r\n\r\nLicense\r\n-------\r\n\r\njrtti is distributed under the terms of the \r\n[GNU Lesser General Public License as published by the Free Software Foundation (LGPLv3)](http://www.gnu.org/licenses/lgpl-3.0-standalone.html).\r\n\r\njrtti is distributed WITHOUT ANY WARRANTY. Use at your own risk.\r\n","google":"UA-33563182-1","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":" jrtti is a C++ template library providing reflection capabilities"}